# ssh_backup.yml
name: 'Backup to Server'
description: 'Backup artifacts to remote server'

inputs:
  os:
    description: 'Operating system'
    required: true
  version:
    description: 'Version type (Full/Demo)'
    required: true

runs:
  using: composite
  steps:

    # Print build folder contents
    # ==========================================================================================
    - name: List Build Directory Contents
      run: |
        Write-Host "Listing all files and directories in the build/plugin directory:"
        Get-ChildItem -Path "${{github.workspace}}\build\" -Recurse
      shell: pwsh

    # Setup SSH
    # ==========================================================================================
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.ID_GITHUB }}

    # Add Host Key (Windows)
    # ==========================================================================================
    - name: Add Host Key (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (-Not (Test-Path -Path $HOME/.ssh)) {
          New-Item -ItemType Directory -Path $HOME/.ssh
        }
        ssh-keyscan -p 7822 CaulfieldEngineering.com | Out-File -Append -Encoding ascii $HOME/.ssh/known_hosts

    # Add Host Key (macOS)
    # ==========================================================================================
    - name: Add Host Key (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -p 7822 CaulfieldEngineering.com >> ~/.ssh/known_hosts

    # Create SSH Configuration
    # ==========================================================================================
    - name: Create SSH Config
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "Host CaulfieldEngineering.com
          HostName CaulfieldEngineering.com
          User caulfiel
          Port 7822
          MACs hmac-sha2-256
          StrictHostKeyChecking no" > ~/.ssh/config

    # Verify SSH Key and Connection
    # ==========================================================================================
    - name: Verify SSH Key and Connection
      shell: bash
      run: |
        echo "Checking loaded SSH keys:"
        ssh-add -l
        
        echo "Attempting SSH connection:"
        ssh -vvv CaulfieldEngineering.com exit

    # Debug SSH Connection
    # ==========================================================================================
    - name: Upload to Server (SCP)
      shell: bash
      run: |
        set -x  # Enable debugging output
    
        # Begin the upload process
        echo "Starting upload process"
    
        # Set the destination directory to the version number (e.g., v1.0.0)
        DEST_DIR="v${wPROJECT_VERSION}"
        echo "DEST_DIR set to: $DEST_DIR"
    
        # Extract the repository name from the GitHub repository environment variable
        REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
        echo "REPO_NAME set to: $REPO_NAME"
    
        # Determine the source file based on the operating system
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          # macOS: Set the source file path for macOS installer
          SOURCE_FILE="${{github.workspace}}/build/${REPO_NAME}MacInstaller_${wPROJECT_VERSION}${{ matrix.version == 'Demo' && '.D' || '' }}.pkg"
          echo "macOS build: SOURCE_FILE set to $SOURCE_FILE"
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          # Windows: Set the source file path for Windows installer
          SOURCE_FILE="${{github.workspace}}/build/${REPO_NAME}WinInstaller_${wPROJECT_VERSION}${{ matrix.version == 'Demo' && '.D' || '' }}.exe"
          echo "Windows build: SOURCE_FILE set to $SOURCE_FILE"
        else
          # Unsupported OS error
          echo "Unsupported OS: ${{ matrix.os }}"
          exit 1
        fi
    
        # Define the destination path on the remote server where files will be uploaded
        DEST_PATH="/home/caulfiel/public_html/plug-ins/${REPO_NAME}/uploads/${DEST_DIR}/"
        SERVER="CaulfieldEngineering.com"
        SSH_COMMAND="ssh $SERVER"
    
        # Check if the version-specific directory exists on the server
        echo "Checking if destination version directory exists on the server"
        if eval "$SSH_COMMAND 'test -d $DEST_PATH'"; then
          echo "Version directory exists: $DEST_PATH"
        else
          # Create the version-specific directory if it does not exist
          echo "Version directory does not exist, creating directory: $DEST_PATH"
          if eval "$SSH_COMMAND 'mkdir -p $DEST_PATH'"; then
            echo "Version directory created successfully"
          else
            echo "Failed to create version directory: $DEST_PATH"
            exit 1
          fi
        fi
    
        # Check if the source file exists before attempting the upload
        if [ -f "$SOURCE_FILE" ]; then
          echo "Source file exists"
        else
          echo "Source file does not exist"
          # List the files in the build directory to help debug
          ls -l ${{github.workspace}}/build/
          exit 1
        fi
    
        # Begin the SCP transfer to upload the file to the server
        SCP_COMMAND="scp -v \"$SOURCE_FILE\" \"$SERVER:$DEST_PATH\""
        echo "Executing SCP command: $SCP_COMMAND"
    
        if eval $SCP_COMMAND; then
          echo "SCP command succeeded"
        else
          echo "SCP command failed with exit code $?"
          exit 1
        fi
    
        # Disable debugging output
        set +x  