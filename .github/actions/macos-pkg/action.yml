name: 'Package macOS'
description: 'Create, sign, notarize, and staple macOS packages'

inputs:
  version:
    description: "Version of the application (e.g., Demo or Full)"
    required: true
    type: string
  mac_application_certificate:
    description: "Base64-encoded macOS application certificate"
    required: true
    type: string
  mac_certificate_password:
    description: "Password for the macOS application certificate"
    required: true
    type: string
  keychain_password:
    description: "Password for the temporary keychain"
    required: true
    type: string
  repository_name:
    description: "Name of the repository"
    required: true
    type: string
  apple_id:
    description: "Apple ID for notarization"
    required: true
    type: string
  apple_team_id:
    description: "Apple Team ID for notarization"
    required: true
    type: string
  apple_app_specific_password:
    description: "App-specific password for notarization"
    required: true
    type: string

runs:
  using: composite
  steps:

    # Step 1: Set up temporary keychain
    - name: Set up temporary keychain
      shell: bash
      run: |
        echo "Setting up keychain..."
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        security create-keychain -p "${{ inputs.keychain_password }}" "$KEYCHAIN_PATH"
        security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
        security unlock-keychain -p "${{ inputs.keychain_password }}" "$KEYCHAIN_PATH"

        echo -n "${{ inputs.mac_application_certificate }}" | base64 --decode > "$RUNNER_TEMP/cert.p12"
        security import "$RUNNER_TEMP/cert.p12" -P "${{ inputs.mac_certificate_password }}" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
        security list-keychains -d user -s "$KEYCHAIN_PATH"
        security default-keychain -s "$KEYCHAIN_PATH"
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ inputs.keychain_password }}" "$KEYCHAIN_PATH"
        echo "Keychain setup complete."

    # Step 2: Sign individual binaries
    - name: Sign individual binaries
      shell: bash
      run: |
        echo "Starting macOS binary signing process..."
        SUFFIX=""
        if [[ "${{ inputs.version }}" == "Demo" ]]; then
          SUFFIX=".D"
        fi

        # VST3 signing
        VST3_PATH="${GITHUB_WORKSPACE}/build/plugin/${{ inputs.repository_name }}_artefacts/Release/VST3/${{ inputs.repository_name }}.vst3"
        echo "Signing VST3 bundle at $VST3_PATH..."
        codesign --force --sign "Developer ID Application" --verbose --deep --strict --options=runtime --timestamp "$VST3_PATH"
        codesign --verify --deep --verbose=2 "$VST3_PATH"

        # Standalone app signing
        APP_PATH="${GITHUB_WORKSPACE}/build/plugin/${{ inputs.repository_name }}_artefacts/Release/Standalone/${{ inputs.repository_name }}.app"
        echo "Signing standalone application at $APP_PATH..."
        codesign --force --sign "Developer ID Application" --verbose --deep --strict --options=runtime --timestamp "$APP_PATH"
        codesign --verify --deep --verbose=2 "$APP_PATH"
        echo "MacOS binaries signed successfully."

    # Step 3: Create distribution.xml
    - name: Copy appropriate distribution.xml file
      shell: bash
      run: |
        echo "Preparing distribution.xml file..."
        SUFFIX=""
        DIST_FILE="distribution-full.xml"
        if [[ "${{ inputs.version }}" == "Demo" ]]; then
          SUFFIX=".D"
          DIST_FILE="distribution-demo.xml"
        fi

        SOURCE_FILE="${GITHUB_WORKSPACE}/build/$DIST_FILE"
        TARGET_FILE="${GITHUB_WORKSPACE}/build/output/distribution.xml"

        if [ ! -f "$SOURCE_FILE" ]; then
          echo "ERROR: Distribution file not found: $SOURCE_FILE"
          echo "Contents of build directory:"
          ls -la "${GITHUB_WORKSPACE}/build/"
          exit 1
        fi

        cp "$SOURCE_FILE" "$TARGET_FILE"

        if [ ! -f "$TARGET_FILE" ]; then
          echo "ERROR: Failed to copy distribution.xml file"
          exit 1
        fi
        echo "Distribution.xml file copied successfully: $TARGET_FILE"

    # Step 4: Create the distribution package
    - name: Create distribution package
      shell: bash
      run: |
        echo "Creating distribution package..."
        SUFFIX=""
        if [[ "${{ inputs.version }}" == "Demo" ]]; then
          SUFFIX=".D"
        fi

        DIST_PKG="${GITHUB_WORKSPACE}/build/output/${{ inputs.repository_name }}MacInstaller_${{ inputs.version }}${SUFFIX}.pkg"

        productbuild --distribution "${GITHUB_WORKSPACE}/build/output/distribution.xml" \
          --package-path "${GITHUB_WORKSPACE}/build/output" \
          "$DIST_PKG"

        if [ ! -f "$DIST_PKG" ]; then
          echo "ERROR: Distribution package not created"
          exit 1
        fi
        echo "Distribution package created successfully: $DIST_PKG"

    # Step 5: Sign distribution package
    - name: Sign distribution package
      shell: bash
      run: |
        echo "Signing distribution package..."
        SUFFIX=""
        if [[ "${{ inputs.version }}" == "Demo" ]]; then
          SUFFIX=".D"
        fi

        UNSIGNED_PKG="${GITHUB_WORKSPACE}/build/output/${{ inputs.repository_name }}MacInstaller_${{ inputs.version }}${SUFFIX}.pkg"
        SIGNED_PKG="${GITHUB_WORKSPACE}/build/output/${{ inputs.repository_name }}MacInstaller_${{ inputs.version }}${SUFFIX}_signed.pkg"

        productsign --sign "Developer ID Installer" "$UNSIGNED_PKG" "$SIGNED_PKG"

        if [ ! -f "$SIGNED_PKG" ]; then
          echo "ERROR: Signed package not created"
          exit 1
        fi

        mv "$SIGNED_PKG" "$UNSIGNED_PKG"
        echo "Distribution package signed successfully."

    # Step 6: Notarize and staple distribution package
    - name: Notarize and staple distribution package
      shell: bash
      run: |
        echo "Notarizing and stapling distribution package..."
        SUFFIX=""
        if [[ "${{ inputs.version }}" == "Demo" ]]; then
          SUFFIX=".D"
        fi

        DIST_PKG="${GITHUB_WORKSPACE}/build/output/${{ inputs.repository_name }}MacInstaller_${{ inputs.version }}${SUFFIX}.pkg"

        xcrun notarytool store-credentials "notarytool-profile" --apple-id "${{ inputs.apple_id }}" --team-id "${{ inputs.apple_team_id }}" --password "${{ inputs.apple_app_specific_password }}"
        xcrun notarytool submit "$DIST_PKG" --keychain-profile "notarytool-profile"

        xcrun stapler staple "$DIST_PKG"
        xcrun stapler validate "$DIST_PKG"
        echo "Notarization and stapling completed successfully."

    # Step 7: Clean up
    - name: Clean up
      shell: bash
      run: |
        echo "Cleaning up temporary files and keychain..."
        security default-keychain -s login.keychain
        security delete-keychain "$RUNNER_TEMP/app-signing.keychain-db"
        rm -f "$RUNNER_TEMP/cert.p12"
        echo "Cleanup completed successfully."
