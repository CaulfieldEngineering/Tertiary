name: Build and Upload

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:

  # Job: Build
  # ==========================================================================================
  # ==========================================================================================
  build:

    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        build_type: [Release]
        version: [Full, Demo]
        include:
          - os: windows-latest
            cmake_arch: -A x64
          - os: macos-latest
            cmake_arch: -DCMAKE_OSX_ARCHITECTURES=x86_64

    runs-on: ${{ matrix.os }}

    # Checkout Code
    # ==========================================================================================
    steps:
    - name: Checkout code
      uses: actions/checkout@v4



    # Cache Dependencies
    # ==========================================================================================
    # - name: Cache dependencies
    #   id: cache-libs
    #   uses: actions/cache@v4
    #   with:
    #     path: | 
    #       ${{github.workspace}}/libs
    #     key: libs



    # Configure Projects
    # ==========================================================================================
    - name: Configure CMake
      run: |
        if [ "${{ matrix.version }}" == "Demo" ]; then
          cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DBUILD_DEMO=ON ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        elif [ "${{ matrix.version }}" == "Full" ]; then
          cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DBUILD_DEMO=OFF ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        else
          echo "Unexpected version: ${{ matrix.version }}"
          exit 1
        fi
      shell: bash



    # Compile Executables
    # ==========================================================================================
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }}



    # Gather project variables from config.cmake
    # ==========================================================================================
    - name: Extract and Set Configuration Variables
      run: |
        echo "Reading configuration from config.cmake..."
        while IFS=' ' read -r key value
        do
          value=$(echo $value | tr -d '"')  # Remove quotes
          echo "$key=$value" >> $GITHUB_ENV
        done < <(grep 'set(w' ${GITHUB_WORKSPACE}/config.cmake | sed -e 's/set(//g' -e 's/)//g' -e 's/\s\+/ /g')
      shell: bash
      


      # Debug; print project variables
      # ==========================================================================================
    - name: Use Variables
      run: |
        echo "Plugin Name: $wPLUGIN_NAME"
        echo "Company Name: $wCOMPANY_NAME"
        echo "Project Version: $wPROJECT_VERSION"
        echo "Manufacturer Code: $wPLUGIN_MANUFACTURER_CODE"
        echo "Formats: $wFORMATS"
        echo "Is Synth: $wIS_SYNTH"
        echo "Needs MIDI Input: $wNEEDS_MIDI_INPUT"
        echo "Needs MIDI Output: $wNEEDS_MIDI_OUTPUT"
        echo "Plugin Code: $wPLUGIN_CODE"



    # Install Inno Setup (Windows Only)
    # ==========================================================================================
    - name: Install Inno Setup (Windows Only)
      if: matrix.os == 'windows-latest'
      run: choco install innosetup --yes



    # Sign Payload (Win)
    # ==========================================================================================



    # Sign Payload (Mac)
    # ==========================================================================================



    # Compile Inno Setup script (Windows Only)
    # ==========================================================================================
    - name: Compile Inno Setup script (Windows Only)
      if: matrix.os == 'windows-latest'
      run: |
        & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' "${{github.workspace}}\build\installer_win.iss"
      shell: pwsh



    # Package: Standalone (Mac)
    # ==========================================================================================
    - name: Create Standalone Package (Mac Only)
      if: matrix.os == 'macos-latest'
      env:
        REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/build/output
    
        # Format COMPANY_NAME by removing spaces
        FORMATTED_COMPANY_NAME=$(echo "$wCOMPANY_NAME" | tr -d ' ')

        echo "Using formatted company name: $FORMATTED_COMPANY_NAME"
        echo "Using version: $VERSION"

        pkgbuild \
          --root "${GITHUB_WORKSPACE}/build/plugin/${REPOSITORY_NAME}_artefacts/Release/Standalone" \
          --identifier com.${FORMATTED_COMPANY_NAME}.${REPOSITORY_NAME}.vst3 \
          --version $wPROJECT_VERSION \
          --install-location /Applications/${REPOSITORY_NAME} \
          ${GITHUB_WORKSPACE}/build/output/${REPOSITORY_NAME}_Standalone.pkg

        

    # Package: VST3 (Mac)
    # ==========================================================================================
    - name: Create VST3 Package (Mac Only)
      if: matrix.os == 'macos-latest'
      env:
        REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/build/output

        # Format COMPANY_NAME by removing spaces
        FORMATTED_COMPANY_NAME=$(echo "$wCOMPANY_NAME" | tr -d ' ')

        echo "Using formatted company name: $FORMATTED_COMPANY_NAME"
        echo "Using version: $VERSION"

        pkgbuild \
          --root "${GITHUB_WORKSPACE}/build/plugin/${REPOSITORY_NAME}_artefacts/Release/VST3" \
          --identifier com.${FORMATTED_COMPANY_NAME}.${REPOSITORY_NAME}.vst3 \
          --version $wPROJECT_VERSION \
          --install-location /Library/Audio/Plug-Ins/VST3 \
          ${GITHUB_WORKSPACE}/build/output/${REPOSITORY_NAME}_VST3.pkg



    # Package: Distribution (Mac)
    # ==========================================================================================
    - name: Create Distribution Package (Mac Only)
      if: matrix.os == 'macos-latest'
      env:
        REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/build/output
        cp ${{github.workspace}}/build/distribution.xml ${GITHUB_WORKSPACE}/build/output/distribution.xml
        echo "File 'distribution.xml' copied to build/output folder."

        # Determine the suffix based on the version
        SUFFIX=""
        if [[ "${{ matrix.version }}" == "Demo" ]]; then
          SUFFIX=".D"
        fi

        productbuild \
          --distribution ${GITHUB_WORKSPACE}/build/output/distribution.xml \
          --package-path ${GITHUB_WORKSPACE}/build/output \
          ${{github.workspace}}/build/${REPOSITORY_NAME}MacInstaller_${wPROJECT_VERSION}${SUFFIX}.pkg
      shell: bash



    # Print build folder contents
    # ==========================================================================================
    - name: List Build Directory Contents
      run: |
        Write-Host "Listing all files and directories in the build/plugin directory:"
        Get-ChildItem -Path "${{github.workspace}}\build\" -Recurse
      shell: pwsh



    # Sign Installer (Win)
    # ==========================================================================================



    # Sign Installer (Mac)
    # ==========================================================================================


    # Notarize the Installer (Mac)
    # ==========================================================================================



    # Staple the Notarization Ticket (Mac)
    # ==========================================================================================

    

    # Setup SSH
    # ==========================================================================================
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.ID_GITHUB }}



    # Add Host Key (Windows)
    # ==========================================================================================
    - name: Add Host Key (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (-Not (Test-Path -Path $HOME/.ssh)) {
          New-Item -ItemType Directory -Path $HOME/.ssh
        }
        ssh-keyscan -p 7822 CaulfieldEngineering.com | Out-File -Append -Encoding ascii $HOME/.ssh/known_hosts



    # Add Host Key (macOS)
    # ==========================================================================================
    - name: Add Host Key (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -p 7822 CaulfieldEngineering.com >> ~/.ssh/known_hosts



    # Create SSH Configuration
    # ==========================================================================================
    - name: Create SSH Config
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "Host CaulfieldEngineering.com
          HostName CaulfieldEngineering.com
          User caulfiel
          Port 7822
          MACs hmac-sha2-256
          StrictHostKeyChecking no" > ~/.ssh/config



    # Verify SSH Key and Connection
    # ==========================================================================================
    - name: Verify SSH Key and Connection
      shell: bash
      run: |
        echo "Checking loaded SSH keys:"
        ssh-add -l
        
        echo "Attempting SSH connection:"
        ssh -vvv CaulfieldEngineering.com exit



    # Debug SSH Connection
    # ==========================================================================================
    - name: Upload to Server (SCP)
      shell: bash
      run: |
        set -x  # Enable debugging output
    
        # Begin the upload process
        echo "Starting upload process"
    
        # Set the destination directory to the version number (e.g., v1.0.0)
        DEST_DIR="v${wPROJECT_VERSION}"
        echo "DEST_DIR set to: $DEST_DIR"
    
        # Extract the repository name from the GitHub repository environment variable
        REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
        echo "REPO_NAME set to: $REPO_NAME"
    
        # Determine the source file based on the operating system
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          # macOS: Set the source file path for macOS installer
          SOURCE_FILE="${{github.workspace}}/build/${REPO_NAME}MacInstaller_${wPROJECT_VERSION}${{ matrix.version == 'Demo' && '.D' || '' }}.pkg"
          echo "macOS build: SOURCE_FILE set to $SOURCE_FILE"
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          # Windows: Set the source file path for Windows installer
          SOURCE_FILE="${{github.workspace}}/build/${REPO_NAME}WinInstaller_${wPROJECT_VERSION}${{ matrix.version == 'Demo' && '.D' || '' }}.exe"
          echo "Windows build: SOURCE_FILE set to $SOURCE_FILE"
        else
          # Unsupported OS error
          echo "Unsupported OS: ${{ matrix.os }}"
          exit 1
        fi
    
        # Define the destination path on the remote server where files will be uploaded
        DEST_PATH="/home/caulfiel/public_html/plug-ins/${REPO_NAME}/uploads/${DEST_DIR}/"
        SERVER="CaulfieldEngineering.com"
        SSH_COMMAND="ssh $SERVER"
    
        # Check if the version-specific directory exists on the server
        echo "Checking if destination version directory exists on the server"
        if eval "$SSH_COMMAND 'test -d $DEST_PATH'"; then
          echo "Version directory exists: $DEST_PATH"
        else
          # Create the version-specific directory if it does not exist
          echo "Version directory does not exist, creating directory: $DEST_PATH"
          if eval "$SSH_COMMAND 'mkdir -p $DEST_PATH'"; then
            echo "Version directory created successfully"
          else
            echo "Failed to create version directory: $DEST_PATH"
            exit 1
          fi
        fi
    
        # Check if the source file exists before attempting the upload
        if [ -f "$SOURCE_FILE" ]; then
          echo "Source file exists"
        else
          echo "Source file does not exist"
          # List the files in the build directory to help debug
          ls -l ${{github.workspace}}/build/
          exit 1
        fi
    
        # Begin the SCP transfer to upload the file to the server
        SCP_COMMAND="scp -v \"$SOURCE_FILE\" \"$SERVER:$DEST_PATH\""
        echo "Executing SCP command: $SCP_COMMAND"
    
        if eval $SCP_COMMAND; then
          echo "SCP command succeeded"
        else
          echo "SCP command failed with exit code $?"
          exit 1
        fi
    
        # After the upload, create a zip archive of the entire version folder on the server
        #### The archive will be named REPO_NAME_vVERSION.zip and stored in the same version folder
        ####ZIP_NAME="${REPO_NAME}_v${wPROJECT_VERSION}.zip"
        ####echo "Creating zip archive of the version folder: $ZIP_NAME"
        ####ZIP_COMMAND="ssh $SERVER 'cd /home/caulfiel/public_html/plug-ins/${REPO_NAME}/uploads/${DEST_DIR} && zip -r $ZIP_NAME ./*'"
        
        ####if eval $ZIP_COMMAND; then
        ####  echo "Zip file created successfully: $ZIP_NAME"
        ####else
        ####  echo "Failed to create zip file with exit code $?"
        ####  exit 1
        ####fi
    
        # Disable debugging output
        set +x  



        
    # Upload Installers to WordPress.
    # ==========================================================================================
    - name: Upload Installers to WordPress
      env:
        WORDPRESS_USERNAME: ${{ secrets.WORDPRESS_USERNAME }}
        WORDPRESS_APPLICATION_PASSWORD: ${{ secrets.WORDPRESS_APPLICATION_PASSWORD }}
        WORDPRESS_SITE: ${{ secrets.WORDPRESS_SITE }}
      run: |
        # Enable verbose debugging output
        set -x

        # Add some spacing for readability
        echo "\n\n============================================"
        echo "Starting WordPress Upload Process"
        echo "============================================\n\n"

        # Ensure required environment variables are set
        if [ -z "$WORDPRESS_USERNAME" ] || [ -z "$WORDPRESS_APPLICATION_PASSWORD" ] || [ -z "$WORDPRESS_SITE" ]; then
          echo "\nWordPress credentials not set. Skipping WordPress upload step.\n"
          exit 0
        fi
        
        # Extract the repository name from the GitHub repository environment variable
        REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
        echo "\nREPO_NAME set to: $REPO_NAME\n"

        # Determine the suffix based on the version
        SUFFIX=""
        if [ "${{ matrix.version }}" == "Demo" ]; then
          SUFFIX=".D"
        fi

        # Define the file path based on the OS
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          FILE_PATH="${{github.workspace}}/build/${REPO_NAME}MacInstaller_${wPROJECT_VERSION}${SUFFIX}.pkg"
          if [ "${{ matrix.version }}" == "Demo" ]; then
            FILE_TITLE="Tertiary Demo Installer v${wPROJECT_VERSION}${SUFFIX} for Mac"
            FILE_DESCRIPTION="Tertiary Demo Installer v${wPROJECT_VERSION}${SUFFIX} for Mac"
          else
            FILE_TITLE="Tertiary Installer v${wPROJECT_VERSION} for Mac"
            FILE_DESCRIPTION="Tertiary Installer v${wPROJECT_VERSION} for Mac"
          fi
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          FILE_PATH="${{github.workspace}}/build/${REPO_NAME}WinInstaller_${wPROJECT_VERSION}${SUFFIX}.exe"
          if [ "${{ matrix.version }}" == "Demo" ]; then
            FILE_TITLE="Tertiary Demo Installer v${wPROJECT_VERSION}${SUFFIX} for Windows"
            FILE_DESCRIPTION="Tertiary Demo Installer v${wPROJECT_VERSION}${SUFFIX} for Windows"
          else
            FILE_TITLE="Tertiary Installer v${wPROJECT_VERSION} for Windows"
            FILE_DESCRIPTION="Tertiary Installer v${wPROJECT_VERSION} for Windows"
          fi
        else
          echo "\nUnsupported OS for WordPress upload\n"
          exit 1
        fi

        # Check if the file exists
        if [ ! -f "$FILE_PATH" ]; then
          echo "\nFile not found: $FILE_PATH\n"
          exit 1
        fi

        # Check if a file with the same name already exists in WordPress
        echo "\nChecking if a file with the exact title already exists in WordPress...\n"
        QUERY_TITLE=$(echo ${FILE_TITLE} | sed 's/ /%20/g')
        echo "Querying WordPress API with title: $QUERY_TITLE\n"

        EXISTING_FILE_RESPONSE=$(curl -s -X GET "${WORDPRESS_SITE}/wp-json/wp/v2/media?search=${QUERY_TITLE}" \
          -u "$WORDPRESS_USERNAME:$WORDPRESS_APPLICATION_PASSWORD")
        echo "Existing file response: $EXISTING_FILE_RESPONSE\n"

        # Parse the JSON response and iterate through each result to check for an exact match
        MATCH_FOUND=false
        for row in $(echo "${EXISTING_FILE_RESPONSE}" | jq -r '.[] | @base64'); do
            _jq() {
                echo ${row} | base64 --decode | jq -r ${1}
            }

            EXISTING_FILE_ID=$(_jq '.id')
            EXISTING_FILE_NAME=$(_jq '.title.rendered')
            EXISTING_FILE_DESC=$(_jq '.description.rendered')
            EXISTING_FILE_URL=$(_jq '.source_url')

            echo "Checking file with ID: $EXISTING_FILE_ID"
            echo "Title: $EXISTING_FILE_NAME"
            echo "Description: $EXISTING_FILE_DESC"
            echo "URL: $EXISTING_FILE_URL"

            # Check if the title matches exactly
            if [ "$EXISTING_FILE_NAME" == "$FILE_TITLE" ]; then
                echo "\nExact match found for title: $EXISTING_FILE_NAME\n"
                MATCH_FOUND=true

                # Delete the file since it matches exactly
                echo "Deleting existing file with ID: $EXISTING_FILE_ID and Name: $EXISTING_FILE_NAME\n"
                DELETE_RESPONSE=$(curl -s -X DELETE "${WORDPRESS_SITE}/wp-json/wp/v2/media/${EXISTING_FILE_ID}?force=true" \
                  -u "$WORDPRESS_USERNAME:$WORDPRESS_APPLICATION_PASSWORD")
                echo "Delete response: $DELETE_RESPONSE\n"
                break
            fi
        done

        if [ "$MATCH_FOUND" == false ]; then
            echo "\nNo existing file with an exact matching title found. Proceeding with upload.\n"
        fi

        # Upload the file to WordPress using CURL
        echo "\nUploading the file to WordPress...\n"
        UPLOAD_RESPONSE=$(curl -s -X POST "${WORDPRESS_SITE}/wp-json/wp/v2/media" \
          -u "$WORDPRESS_USERNAME:$WORDPRESS_APPLICATION_PASSWORD" \
          -F "file=@${FILE_PATH}" \
          -F "title=${FILE_TITLE}" \
          -F "alt_text=${REPO_NAME} Installer" \
          -F "caption=Installer for ${REPO_NAME} v${wPROJECT_VERSION}" \
          -F "description=${FILE_DESCRIPTION}")

        # Check if the response is a valid JSON
        echo "Upload response: $UPLOAD_RESPONSE\n"
        if ! echo "$UPLOAD_RESPONSE" | jq empty; then
          echo "\nInvalid JSON response from WordPress: $UPLOAD_RESPONSE\n"
          exit 1
        fi

        # Extract the URL from the response (optional for verification)
        FILE_URL=$(echo "$UPLOAD_RESPONSE" | jq -r '.source_url')

        if [ -z "$FILE_URL" ] || [ "$FILE_URL" == "null" ]; then
          echo "\nFailed to upload file to WordPress\n"
          echo "$UPLOAD_RESPONSE"
          exit 1
        else
          echo "\nFile successfully uploaded to WordPress: $FILE_URL\n"
        fi

        # Disable verbose debugging output
        set +x
        # Add spacing to indicate the end of the process
        echo "\n\n============================================"
        echo "WordPress Upload Process Completed"
        echo "============================================\n\n"
      shell: bash