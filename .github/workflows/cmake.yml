name: Build and Upload

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        build_type: [Release]
        version: [Full, Demo]
        include:
          - os: windows-latest
            cmake_arch: -A x64
          - os: macos-latest
            cmake_arch: -DCMAKE_OSX_ARCHITECTURES=x86_64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Cache Dependencies
    # ==========================================================================================
    # - name: Cache dependencies
    #   id: cache-libs
    #   uses: actions/cache@v4
    #   with:
    #     path: | 
    #       ${{github.workspace}}/libs
    #     key: libs

    # Configure Projects
    # ==========================================================================================
    - name: Configure CMake
      run: |
        if [ "${{ matrix.version }}" == "Demo" ]; then
          cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DBUILD_DEMO=ON ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        elif [ "${{ matrix.version }}" == "Full" ]; then
          cmake -S "${{github.workspace}}" -B "${{github.workspace}}/build" -DBUILD_DEMO=OFF ${{ matrix.cmake_arch }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        else
          echo "Unexpected version: ${{ matrix.version }}"
          exit 1
        fi
      shell: bash

    # Compile Executables
    # ==========================================================================================
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }}
    # Gather project variables from config.cmake
    # ==========================================================================================
    - name: Extract and Set Configuration Variables
      run: |
        echo "Reading configuration from config.cmake..."
        while IFS=' ' read -r key value
        do
          value=$(echo $value | tr -d '"')  # Remove quotes
          echo "$key=$value" >> $GITHUB_ENV
        done < <(grep 'set(w' ${GITHUB_WORKSPACE}/config.cmake | sed -e 's/set(//g' -e 's/)//g' -e 's/\s\+/ /g')
      shell: bash
      
      # Debug; print project variables
      # ==========================================================================================
    - name: Use Variables
      run: |
        echo "Plugin Name: $wPLUGIN_NAME"
        echo "Company Name: $wCOMPANY_NAME"
        echo "Project Version: $wPROJECT_VERSION"
        echo "Manufacturer Code: $wPLUGIN_MANUFACTURER_CODE"
        echo "Formats: $wFORMATS"
        echo "Is Synth: $wIS_SYNTH"
        echo "Needs MIDI Input: $wNEEDS_MIDI_INPUT"
        echo "Needs MIDI Output: $wNEEDS_MIDI_OUTPUT"
        echo "Plugin Code: $wPLUGIN_CODE"

    # Install Inno Setup (Windows Only)
    # ==========================================================================================
    - name: Install Inno Setup (Windows Only)
      if: matrix.os == 'windows-latest'
      run: choco install innosetup --yes



    # Sign Payload (Win)
    # ==========================================================================================



    # Sign Payload (Mac)
    # ==========================================================================================



    # Compile Inno Setup script (Windows Only)
    # ==========================================================================================
    - name: Compile Inno Setup script (Windows Only)
      if: matrix.os == 'windows-latest'
      run: |
        & 'C:\Program Files (x86)\Inno Setup 6\ISCC.exe' "${{github.workspace}}\build\installer_win.iss"
      shell: pwsh


 








    # Package: Standalone (Mac)
    # ==========================================================================================
    - name: Create Standalone Package (Mac Only)
      if: matrix.os == 'macos-latest'
      env:
        REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/build/output
    
        # Format COMPANY_NAME by removing spaces
        FORMATTED_COMPANY_NAME=$(echo "$wCOMPANY_NAME" | tr -d ' ')

        echo "Using formatted company name: $FORMATTED_COMPANY_NAME"
        echo "Using version: $VERSION"

        pkgbuild \
          --root "${GITHUB_WORKSPACE}/build/plugin/${REPOSITORY_NAME}_artefacts/Release/Standalone" \
          --identifier com.${FORMATTED_COMPANY_NAME}.${REPOSITORY_NAME}.vst3 \
          --version $wPROJECT_VERSION \
          --install-location /Applications/${REPOSITORY_NAME} \
          ${GITHUB_WORKSPACE}/build/output/${REPOSITORY_NAME}_Standalone.pkg
  
      # Package: VST3 (Mac)
      # ==========================================================================================
    - name: Create VST3 Package (Mac Only)
      if: matrix.os == 'macos-latest'
      env:
        REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/build/output

        # Format COMPANY_NAME by removing spaces
        FORMATTED_COMPANY_NAME=$(echo "$wCOMPANY_NAME" | tr -d ' ')

        echo "Using formatted company name: $FORMATTED_COMPANY_NAME"
        echo "Using version: $VERSION"

        pkgbuild \
          --root "${GITHUB_WORKSPACE}/build/plugin/${REPOSITORY_NAME}_artefacts/Release/VST3" \
          --identifier com.${FORMATTED_COMPANY_NAME}.${REPOSITORY_NAME}.vst3 \
          --version $wPROJECT_VERSION \
          --install-location /Library/Audio/Plug-Ins/VST3 \
          ${GITHUB_WORKSPACE}/build/output/${REPOSITORY_NAME}_VST3.pkg

    # Package: Distribution (Mac)
    # ==========================================================================================
    - name: Create Distribution Package (Mac Only)
      if: matrix.os == 'macos-latest'
      env:
        REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        mkdir -p ${GITHUB_WORKSPACE}/build/output
        cp ${{github.workspace}}/build/distribution.xml ${GITHUB_WORKSPACE}/build/output/distribution.xml
        echo "File 'distribution.xml' copied to build/output folder."

        # Determine the suffix based on the version
        SUFFIX=""
        if [[ "${{ matrix.version }}" == "Demo" ]]; then
          SUFFIX=".D"
        fi

        productbuild \
          --distribution ${GITHUB_WORKSPACE}/build/output/distribution.xml \
          --package-path ${GITHUB_WORKSPACE}/build/output \
          ${{github.workspace}}/build/${REPOSITORY_NAME}MacInstaller_${wPROJECT_VERSION}${SUFFIX}.pkg
      shell: bash


    # Print build folder contents
    # ==========================================================================================
    - name: List Build Directory Contents
      run: |
        Write-Host "Listing all files and directories in the build/plugin directory:"
        Get-ChildItem -Path "${{github.workspace}}\build\" -Recurse
      shell: pwsh







    # Sign Installer (Win)
    # ==========================================================================================



    # Sign Installer (Mac)
    # ==========================================================================================


    # Notarize the Installer (Mac)
    # ==========================================================================================



    # Staple the Notarization Ticket (Mac)
    # ==========================================================================================




    # Setup SSH
    # ==========================================================================================
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.ID_GITHUB }}

    # Add Host Key (Windows)
    # ==========================================================================================
    - name: Add Host Key (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        if (-Not (Test-Path -Path $HOME/.ssh)) {
          New-Item -ItemType Directory -Path $HOME/.ssh
        }
        ssh-keyscan -p 7822 CaulfieldEngineering.com | Out-File -Append -Encoding ascii $HOME/.ssh/known_hosts

    # Add Host Key (macOS)
    # ==========================================================================================
    - name: Add Host Key (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -p 7822 CaulfieldEngineering.com >> ~/.ssh/known_hosts

    # Create SSH Configuration
    # ==========================================================================================
    - name: Create SSH Config
      shell: bash
      run: |
        mkdir -p ~/.ssh
        echo "Host CaulfieldEngineering.com
          HostName CaulfieldEngineering.com
          User caulfiel
          Port 7822
          MACs hmac-sha2-256
          StrictHostKeyChecking no" > ~/.ssh/config

    # Verify SSH Key and Connection
    # ==========================================================================================
    - name: Verify SSH Key and Connection
      shell: bash
      run: |
        echo "Checking loaded SSH keys:"
        ssh-add -l
        
        echo "Attempting SSH connection:"
        ssh -vvv CaulfieldEngineering.com exit

    # Debug SSH Connection
    # ==========================================================================================
    - name: Debug SSH Connection
      shell: bash
      run: |
        ssh CaulfieldEngineering.com "echo 'SSH connection successful'"


    # Upload Installers to Server (SCP)
    # ==========================================================================================
    - name: Upload to Server (SCP)
      shell: bash
      run: |
        set -x  # Enable debugging output

        echo "Starting upload process"
        DEST_DIR="${{ matrix.os == 'windows-latest' && 'win' || 'mac' }}"
        echo "DEST_DIR set to: $DEST_DIR"

        REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
        echo "REPO_NAME set to: $REPO_NAME"

        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          SOURCE_FILE="${{github.workspace}}/build/${REPO_NAME}MacInstaller_${wPROJECT_VERSION}${{ matrix.version == 'Demo' && '.D' || '' }}.pkg"
          echo "macOS build: SOURCE_FILE set to $SOURCE_FILE"
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          SOURCE_FILE="${{github.workspace}}/build/${REPO_NAME}WinInstaller_${wPROJECT_VERSION}${{ matrix.version == 'Demo' && '.D' || '' }}.exe"
          echo "Windows build: SOURCE_FILE set to $SOURCE_FILE"
        else
          echo "Unsupported OS: ${{ matrix.os }}"
          exit 1
        fi

        DEST_PATH="/home/caulfiel/public_html/plug-ins/${REPO_NAME}/uploads/${DEST_DIR}/"
        SERVER="CaulfieldEngineering.com"
        SSH_COMMAND="ssh $SERVER"

        echo "Checking if destination directory exists on the server"
        if eval "$SSH_COMMAND 'test -d $DEST_PATH'"; then
          echo "Directory exists: $DEST_PATH"
        else
          echo "Directory does not exist, creating directory: $DEST_PATH"
          if eval "$SSH_COMMAND 'mkdir -p $DEST_PATH'"; then
            echo "Directory created successfully"
          else
            echo "Failed to create directory: $DEST_PATH"
            exit 1
          fi
        fi

        echo "Beginning SCP Transfer"
        echo "Source file: $SOURCE_FILE"
        echo "Destination path: $SERVER:$DEST_PATH"

        if [ -f "$SOURCE_FILE" ]; then
          echo "Source file exists"
        else
          echo "Source file does not exist"
          ls -l ${{github.workspace}}/build/
          exit 1
        fi

        SCP_COMMAND="scp -v \"$SOURCE_FILE\" \"$SERVER:$DEST_PATH\""

        echo "Executing SCP command: $SCP_COMMAND"

        if eval $SCP_COMMAND; then
          echo "SCP command succeeded"
        else
          echo "SCP command failed with exit code $?"
          exit 1
        fi

        set +x  # Disable debugging output


    # Upload Demo Installers to Shopify Files
    # ==========================================================================================
    - name: Upload File to Shopify Files
      if: matrix.version == 'Demo'
      env:
        SHOPIFY_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ACCESS_TOKEN }}
        SHOPIFY_SHOP_DOMAIN: ${{ secrets.SHOPIFY_SHOP_DOMAIN }}
      run: |
        # Ensure required tools are installed
        if ! command -v jq &> /dev/null; then
          echo "jq could not be found, installing..."
          if [ "$(uname)" == "Darwin" ]; then
            brew install jq
          else
            sudo apt-get update && sudo apt-get install -y jq
          fi
        fi
    
        set -e  # Exit immediately if a command exits with a non-zero status
        set -x  # Enable bash debugging
    
        # Check if required environment variables are set
        if [ -z "$SHOPIFY_ACCESS_TOKEN" ] || [ -z "$SHOPIFY_SHOP_DOMAIN" ]; then
          echo "Shopify credentials not set. Skipping Shopify upload step."
          exit 1
        fi
    
        echo "SHOPIFY_SHOP_DOMAIN: $SHOPIFY_SHOP_DOMAIN"
        echo "SHOPIFY_ACCESS_TOKEN length: ${#SHOPIFY_ACCESS_TOKEN}"
    
        # Acquire Repository Name
        REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
        echo "REPO_NAME: $REPO_NAME"

        # Set file path and name based on OS
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          FILE_PATH="${{github.workspace}}/build/${REPO_NAME}MacInstaller_${wPROJECT_VERSION}.D.pkg"
          FILE_NAME="${REPO_NAME}MacInstaller_${wPROJECT_VERSION}.D.pkg"
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          FILE_PATH="${{github.workspace}}/build/${REPO_NAME}WinInstaller_${wPROJECT_VERSION}.D.exe"
          FILE_NAME="${REPO_NAME}WinInstaller_${wPROJECT_VERSION}.D.exe"
        else
          echo "Unsupported OS: ${{ matrix.os }}"
          exit 1
        fi
    
        echo "FILE_PATH: $FILE_PATH"
        echo "FILE_NAME: $FILE_NAME"
    
        if [ ! -f "$FILE_PATH" ]; then
          echo "Error: File does not exist at $FILE_PATH"
          exit 1
        fi
    
        # Get the file size
        FILE_SIZE=$(wc -c < "$FILE_PATH" | xargs)
        echo "File size: $FILE_SIZE bytes"
    
        # Step 1: Get staged upload URL and parameters
        echo "Requesting staged upload URL from Shopify..."
    
        payload=$(jq -n \
          --arg filename "$FILE_NAME" \
          --arg filesize "$FILE_SIZE" \
          '{
            query: "mutation stagedUploadsCreate($input: [StagedUploadInput!]!) {
              stagedUploadsCreate(input: $input) {
                stagedTargets {
                  url
                  resourceUrl
                  parameters {
                    name
                    value
                  }
                }
                userErrors {
                  field
                  message
                }
              }
            }",
            variables: {
              input: [{
                resource: "FILE",
                filename: $filename,
                mimeType: "application/octet-stream",
                fileSize: $filesize,
                httpMethod: "POST"
              }]
            }
          }')
    
        staged_response=$(curl -s -X POST \
          "https://${SHOPIFY_SHOP_DOMAIN}/admin/api/2023-07/graphql.json" \
          -H "Content-Type: application/json" \
          -H "X-Shopify-Access-Token: ${SHOPIFY_ACCESS_TOKEN}" \
          -d "$payload")
    
        # Check for errors in the staged upload response
        errors_present=$(echo "$staged_response" | jq '(.errors, .data.stagedUploadsCreate.userErrors) | select(. != null and . != []) | length > 0')
    
        if [ "$errors_present" == "true" ]; then
          echo "Error in stagedUploadsCreate response:"
          echo "$staged_response"
          exit 1
        fi
    
        # Extract upload URL and resource URL
        upload_url=$(echo "$staged_response" | jq -r '.data.stagedUploadsCreate.stagedTargets[0].url')
        resource_url=$(echo "$staged_response" | jq -r '.data.stagedUploadsCreate.stagedTargets[0].resourceUrl')
    
        if [ -z "$upload_url" ] || [ "$upload_url" == "null" ]; then
          echo "Failed to get upload URL for staged upload."
          echo "Response: $staged_response"
          exit 1
        fi
    
        echo "Upload URL: $upload_url"
    
        # Extract parameters
        parameters=$(echo "$staged_response" | jq -c '.data.stagedUploadsCreate.stagedTargets[0].parameters')
    
        # Build the form data for the upload
        upload_cmd=(curl -s -X POST "$upload_url")
    
        # Add parameters to the form data
        for param in $(echo "$parameters" | jq -c '.[]'); do
          name=$(echo "$param" | jq -r '.name')
          value=$(echo "$param" | jq -r '.value')
          upload_cmd+=(-F "$name=$value")
        done
    
        # Add the file to the form data
        upload_cmd+=(-F "file=@$FILE_PATH")
    
        # Execute the upload
        echo "Uploading file to staged URL..."
        "${upload_cmd[@]}"
    
        # Step 3: Finalize the upload with fileCreate mutation
        echo "Finalizing upload with fileCreate mutation..."
    
        final_payload=$(jq -n \
          --arg filename "$FILE_NAME" \
          --arg originalSource "$resource_url" \
          '{
            query: "mutation fileCreate($files: [FileCreateInput!]!) {
              fileCreate(files: $files) {
                files {
                  id
                  url
                }
                userErrors {
                  field
                  message
                }
              }
            }",
            variables: {
              files: [{
                originalSource: $originalSource,
                contentType: "FILE",
                filename: $filename
              }]
            }
          }')
    
        final_response=$(curl -s -X POST \
          "https://${SHOPIFY_SHOP_DOMAIN}/admin/api/2023-07/graphql.json" \
          -H "Content-Type: application/json" \
          -H "X-Shopify-Access-Token: ${SHOPIFY_ACCESS_TOKEN}" \
          -d "$final_payload")
    
        # Check for errors in the final upload response
        errors_present=$(echo "$final_response" | jq '(.errors, .data.fileCreate.userErrors) | select(. != null and . != []) | length > 0')
    
        if [ "$errors_present" == "true" ]; then
          echo "Error in fileCreate response:"
          echo "$final_response"
          exit 1
        fi
    
        echo "File uploaded successfully to Shopify Files"
        file_id=$(echo "$final_response" | jq -r '.data.fileCreate.files[0].id')
        file_url=$(echo "$final_response" | jq -r '.data.fileCreate.files[0].url')
        echo "Uploaded file ID: $file_id"
        echo "Uploaded file URL: $file_url"
      shell: bash
  
  
  


    # Update URL Path for Demo Download Buttons (New Version)
    # ==========================================================================================

    

    # Update Product Digital File in Shopify
    # ==========================================================================================
    - name: Update Product Digital File in Shopify
      if: matrix.version == 'Full'
      env:
        SHOPIFY_ACCESS_TOKEN: ${{ secrets.SHOPIFY_ACCESS_TOKEN }}
        SHOPIFY_SHOP_DOMAIN: ${{ secrets.SHOPIFY_SHOP_DOMAIN }}
        SHOPIFY_PRODUCT_ID: ${{ secrets.SHOPIFY_PRODUCT_ID }}
      run: |
        # Check if required environment variables are set
        if [ -z "$SHOPIFY_ACCESS_TOKEN" ] || [ -z "$SHOPIFY_SHOP_DOMAIN" ] || [ -z "$SHOPIFY_PRODUCT_ID" ]; then
          echo "Shopify credentials or Product ID not set. Skipping Shopify product update step."
          exit 0
        fi

        REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
        
        if [ "${{ matrix.os }}" == "macos-latest" ]; then
          FILE_PATH="${{github.workspace}}/build/${REPO_NAME}MacInstaller_${wPROJECT_VERSION}.pkg"
          FILE_NAME="${REPO_NAME}MacInstaller_${wPROJECT_VERSION}.pkg"
        elif [ "${{ matrix.os }}" == "windows-latest" ]; then
          FILE_PATH="${{github.workspace}}/build/${REPO_NAME}WinInstaller_${wPROJECT_VERSION}.exe"
          FILE_NAME="${REPO_NAME}WinInstaller_${wPROJECT_VERSION}.exe"
        else
          echo "Unsupported OS: ${{ matrix.os }}"
          exit 1
        fi
        
        # First, upload the new file
        upload_response=$(curl -X POST \
          "https://${SHOPIFY_SHOP_DOMAIN}/admin/api/2021-07/files.json" \
          -H "X-Shopify-Access-Token: ${SHOPIFY_ACCESS_TOKEN}" \
          -H "Content-Type: application/json" \
          -d "{
            \"file\": {
              \"name\": \"${FILE_NAME}\",
              \"source\": \"$(base64 -w 0 ${FILE_PATH})\"
            }
          }")
        
        # Extract the new file's ID from the response
        NEW_FILE_ID=$(echo $upload_response | jq -r '.file.id')
        
        if [ -z "$NEW_FILE_ID" ]; then
          echo "Failed to upload new file or extract file ID"
          exit 1
        fi
        
        # Now, update the product variant with the new file
        update_response=$(curl -X PUT \
          "https://${SHOPIFY_SHOP_DOMAIN}/admin/api/2021-07/products/${SHOPIFY_PRODUCT_ID}.json" \
          -H "X-Shopify-Access-Token: ${SHOPIFY_ACCESS_TOKEN}" \
          -H "Content-Type: application/json" \
          -d "{
            \"product\": {
              \"variants\": [
                {
                  \"id\": \"${SHOPIFY_PRODUCT_ID}\",
                  \"digital_file\": {
                    \"attachment\": \"${NEW_FILE_ID}\"
                  }
                }
              ]
            }
          }")
        
        echo "Shopify API Update Response: $update_response"
        
        # Check if update was successful
        if echo "$update_response" | grep -q "\"id\":"; then
          echo "Product digital file updated successfully in Shopify"
        else
          echo "Failed to update product digital file in Shopify"
          exit 1
        fi
      shell: bash